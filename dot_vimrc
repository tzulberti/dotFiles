" This must be first, because it changes other options as side effect
set nocompatible


" change the mapleader from \ to ,
let mapleader=","

" Quickly edit/reload the vimrc file
" ,sv Recarga la configuracion del vimrc
" ,ev Edita el vimrc
" ,/  Limpia los campos resaltados por la busqurda
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nmap <silent> ,/ :nohlsearch<CR>




" ------------------------------------------------------------------
" Cosas que ya no me acuerdo para que sirven
set backspace=indent,eol,start
                  " allow backspacing over everything in insert mode
set shiftwidth=4  " number of spaces to use for autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'


" ---------------------------------------------------------
" Cosas relacionadas al formato del archivo
set encoding=utf-8
set ff=unix " set the file format to the unix one (end of lines)



" -------------------------------------------------------------------
"  Cosas relacionadas a la cantidad de caracteres por linea.
set textwidth=80
set colorcolumn=+1 " so a vertical line is shown on char 81
set wrap    " if line is longer that "textwidht" then cut it


" -------------------------------------------------------------------
"  Cosas relacionadas a la busqueda
set hlsearch      " highlight search terms
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  "    case-sensitive otherwise
set incsearch     " show search matches as you type


" -----------------------------------------------------------------
"  Cosas misceleanas de vim
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep
" Para que no cree los archivos de backup y no joda la vida
set nobackup
set noswapfile


" ----------------------------------------------------------------------
" Cosas de tabs

" Para hacer cosas depeniendo del tipo de archivo que es
" si es un archivo de python, bash, etc...
filetype plugin indent on

set tabstop=4     " a tab is four spaces
set expandtab     " when tab is pressed, the tab is replaced by the <tabstop>
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set smarttab      " insert tabs on the start of a line according to
                  "    shiftwidth, not tabstop
                  
" Para que en los makefiles los tabs sigan existiendo.
autocmd FileType make setlocal noexpandtab

" Desabilito el autoindent para los archivos de javascript
" porque son jquery eso hace cosas magicas y molestas.
" autocmd FileType javascript noautoindent nosmartindent

if has("autocmd")
    " Change all the existing tabs to spaces when opening a file
    au BufReadPost * if &modifiable | retab | endif
endif 


" borra los espacios extras al final de las lineas
" (guarda antes la posiciÃ³n y la restablece luego)
autocmd BufWritePre *.py mark z | %s/ *$//e | 'z
autocmd BufWritePre *.js mark z | %s/ *$//e | 'z
autocmd BufWritePre *.json mark z | %s/ *$//e | 'z
autocmd BufWritePre *.html mark z | %s/ *$//e | 'z
autocmd BufWritePre *.css mark z | %s/ *$//e | 'z



" ------------------------------------------------------------------
" Colores y syntax highlight

" Por ahora no tuve ningun problema en usar esta configuracion
" pero bue... Sino se puede poner en el .bashrc lo siguiente:
" TERM=xterm-256color
set t_Co=256



if &t_Co >= 256 || has("gui_running")
    colorscheme wombat
endif

if &t_Co > 2 || has("gui_running")
   " switch syntax highlighting on, when the terminal has colors
   syntax on
endif

" Eso parecia que solucionaba el problema de los colorschemes que eran para
" gvim, pero se veian realmente mal en vim
"
"if (&t_Co == 256 || &t_Co == 88) && !has('gui_running') &&
"  \ filereadable(expand("$HOME/.vim/plugin/guicolorscheme.vim"))

    " Use the guicolorscheme plugin to makes 256-color or 88-color
    " terminal use GUI colors rather than cterm colors.
"    runtime! plugin/guicolorscheme.vim
"    GuiColorScheme mustang
"else
"
"    " For 8-color 16-color terminals or for gvim, just use the
"    " regular :colorscheme command.
"    colorscheme default
"endif







" -------------------------------------------------------------------
" Personalizaciones varias



" Para que automaticamente me genere un tag cerrando al que yo acabo
" de crear en los html, xml, xhtml. Para usarlo se tiene que hacer lo 
" siguiente:
"   '<html>' Se tien que presionar '>' para que este script
" funcione. Aunque el mismo aparezca automaticamente
au FileType xhtml,xml,html so ~/.vim/ftplugin/html_autoclosetag.vim


" Para poder usar el pydoc
" :Pydoc re.compile Tira la documentacion
let g:pydoc_cmd = "/usr/bin/pydoc"
let g:pydoc_highlight=0


" Para mostrar y ocultar el numero de linea
" Por default lo muestra, y con F2 oculta o muestra segun corresponda
set number
map <F2> :set nonumber!<CR>:set foldcolumn=0<CR>


" Activar navegador de archivos
imap <F3> <esc>:NERDTreeToggle<CR>
map <F3> <esc>:NERDTreeToggle<CR>

" Muestra la estructura del modulo
"nnoremap TT :TlistToggle<CR>
"map <F4> :TlistToggle<CR>
let g:tagbar_usearrows = 1
imap <F4> <esc>:TagbarToggle<CR><C-w><C-w>
map <F4> <esc>:TagbarToggle<CR><C-w><C-w>

" Con F5 activo el modo paste. No lo activo por default,
" porque cuando lo activo me deja de funcionar el 
" Omnicomplete
" le tengo que volver a set ruler porque sino en modo paste
" no me la muestra
set ruler

if has('rulerformat')
    set laststatus=2

endif

if has('statusline')
    set laststatus=2
endif

 

imap <F5> <esc>:set paste!<CR>:set ruler<CR>
map <F5> :set paste!<CR>:set ruler<CR>

" Con F6 abro el listado de los ultimos archivos abiertos
" MRU = Most Recently Used files.
" http://www.vim.org/scripts/script.php?script_id=521
" Si lo abre en una subventa (hsplit), entonces
" es que el archivo actual tiene modificaciones no grabadas.
imap <F6> <esc>:MRU<CR>
map <F6> :MRU<CR>


" Para poder grabar usando sudo
" En caso de que sea necesario una password la va a pedir
" De todas formas pregunta para recargar el archivo, pero
" no encontre una solucion mejor
imap <F7> <esc>:w !sudo tee > /dev/null %
map <F7> :w !sudo tee > /dev/null %


" Uses conque to open a python or bash console
map <F8> :ConqueTermSplit python<CR>
map <F9> :ConqueTermSplit bash<CR>



" Permite escrolear con el mouse
" set mouse=a

let g:ctags_statusline=1
let Tlist_Use_Right_Window = 1
let Tlist_Compact_Format = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_File_Fold_Auto_Close = 1

" Para que muestre los diferentes parentesis con colores
" TODO ver si se lo puede hacer funcion para que lo haga tambien
" con las llaves
autocmd Syntax * runtime plugin/RainbowParenthsis.vim




" ---------------------------------------------------------------------
" Temas relacionados al autocompletado
" 
" IMPORTANTE: El mismo solo va a funcionar si en el modo insert
"             se esta usando ruler (no el modo paste)
" ---------------------------------------------------------------------
"


" Control+space abre la ventana del omni-complete
" Control+j abre la ventana de autocompletado de vim
" Las dos opciones de abajo son para que cierre la ventana
" abierta por el omnicomplete cuando ya se eligio una opcion

inoremap <Nul> <C-x><C-o>
inoremap <C-j> <C-x><C-n>
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif 
autocmd InsertLeave * if pumvisible() == 0|pclose|endif 


" Permite autocompletar usando:
" - <tab> para las palabras que estan en el archivo actual
" - <C-Space> para las palabras usando omnicomplete
" Esto solo funciona en los archivos de python
let g:SuperTabDefaultCompletionType = "context"


" Para autocompletar usar: Control+Space
" Por ejemplo:
"       import os
"       os.<C-Space>
" Ver mas arriba.
" Para python el entorno tiene que estar activado antes de abrir vim
" para que pueda autocompletar cosas de ese entorno.
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags



" Function to activate a virtualenv in the embedded interpreter for
" omnicomplete and other things like that.
function LoadVirtualEnv(path)
    let activate_this = a:path . '/bin/activate_this.py'
    if getftype(a:path) == "dir" && filereadable(activate_this)
        python << EOF
import vim
activate_this = vim.eval('l:activate_this')
execfile(activate_this, dict(__file__=activate_this))
EOF
    endif
endfunction

" Load up a 'stable' virtualenv if one exists in ~/.virtualenv
let defaultvirtualenv = $HOME . "/.virtualenvs/stable"

" Only attempt to load this virtualenv if the defaultvirtualenv
" actually exists, and we aren't running with a virtualenv active.
if has("python")
    if ! empty($VIRTUAL_ENV)
        call LoadVirtualEnv($VIRTUAL_ENV)
    endif
endif
